[service]
appname=RDServer5.0
servicename=RDServer5.0
displayname=RDServer5.0
description=Report Designer5.0 Server - http://www.m2soft.co.kr

;service start type
;auto demand disabled	
;default is auto (boot,system,auto,demand,disabled)
starttype=auto

;Allocate a console and register a console event handler to catch shutdown events.
;Default is true; options are FALSE TRUE false true YES NO yes no
;This option has two effects:
;1. If active it catches the logoff events and prevents the service from erroneously stopping in this case.
;2. It creates a console window if interaction with the desktop is allowd.
;Effect 1 can be achieved in Java 1.3.1 and higher by using the -Xrs option.
;Effect 2 may or may not be desired.
;useconsolehandler=TRUE

;Call <stopclass>.<stopmethod> through JNI so stop the JVM.
;This can be used an alternative to the ServiceStopper 
;When all three parameters are defined the RDSERVICE will try to use JNI to stop the service. 
;If not it will use a tcp/ip connection to the stopport.
;The simplest way to use this functionality is to use the Systen.exit() call as specified below. 
;Nevertheless you can call any static method in your code.   
;The method called is expected to terminate the JVM one way or the other. It can directly 
;call System.exit() or make another Thread do it make the main method return. 
;The method can return imediately if desired. If the JVM doesn't stop another attempt can be made to 
;stop the service at a later time.
stopclass=java/lang/System 
stopmethod=exit 

;Take care to specify the right signature for your method. void System.exit( int code ) has 
;the sifnature specified below. void myMethod() has the signature ()V. Please refer to the
;JNI documentation for details.
stopsignature=(I)V


;Value of the PATH environement variable being set by the service. 
;PATH will remain unchanged if this is empty.
;path=c:\util

;Redirect C level stdout and stderr to the specified files
;Please note that those are diffrent files then the ones used below for 
;Java level stdout and stderr
;Default is no redirection
stdout=C:\ServerProgram\RDServer\log\stdout.log
;stdoutappend=no
stderr=C:\ServerProgram\RDServer\log\stderr.log
;stderrappend=no

;Redirect JAVA level System.out and System.err to the specified files
;This simply sets new output streams for System.out and System.err after
;the JVM is initialized but before the main method is called.
;You might find that this option has no effect at all for some applications, as the 
;JAVA application is of course free to redirect System.out and System.err 
;to some other log mechanism.
;Default is no redirection
;Default is to overwrite file
systemout=C:\ServerProgram\RDServer\log\systemout.log
;systemoutappend=no
systemerr=C:\ServerProgram\RDServer\log\systemerr.log
;systemerrappend=no

;Report service stopped on exit of main thread
;you might want to set this to yes if your service terminates "silently"
;It is recommended that a service is stopped by calling System.exit() at some time, 
;either externally or internally. This provides a nice and clean shutdown hook.
;If the service terminates silently by just ending the last thread this might result 
;in the service manager not recognizing the fact and denying restart. Use yes in this case.
;Default is no
;reportservicestoppedonmainthreadexit = no

;Behaviour in case of JVM exiting with an error 
;Define whether an execption in the main method should be considered an error
;Use this exit code in case of an exception.
;exceptionerrorcode=0

;Desired behaviour for a non zero exit code (including exceptions as specified above)
;Options:
;ignore 		terminate without error (default)
;returncode 		exit with error code reported by the JVM to to the service manager
;fatal			don't report regular service stop to service manager making it believe 
;a fatal error had occured in the service (this is sometimes desirable if fatal error 
;recovery mechanisms are in place)
;onexiterror=fatal

;Use this executable for registering the service.
;Default is the executable used for installation
;modulepath=C:\ServerProgram\RDServer\bin\rdservice.exe -ini C:\ServerProgram\RDServer\bin\rdservice.ini


[java]
;Path to the java runtime used
;If this option is not used the default from the registry will be used,jvmtype=classic,server,client (The classic VM is not supported with JDK 1.4. defulat: hotspot client VM)
;jrepath=c:\java\jdk15
;jvmtype=bogus

;working directory
wrkdir=C:\ServerProgram\RDServer\bin

;the number of paramters passed to the java application 
;parameters must be named param00, param01 ...
;Please note that each command line parameter has to go on it's own parameter value here!
;The way the JVM is called in RDSERVICE, the JVMexpects a preparsed array of parameters.
;Everything seperated by whitespace on a java command line is broken down into a parameter here. 
;You won't need to care about quotes
;around string containing spaces here. e.g. 
;java.exe -cp "C:\program files\RDServer\bin\rdserver.jar" m2soft.rdsystem.server.Server "server.port=.>"
;becomes 

params=10
param00=-cp
param01=.\rdserver.jar;.\rdmaster.jar;..\lib\oracle\classes12.jar;..\lib\j2ee.jar
param02=m2soft.rdsystem.server.Server
param03=server.port=8282
param04=manager.port=8089
param05=oencoding=false
param06=iencoding=false
param07=userpool=false 
param08=runschedule=false
param09=usesessionkey=false